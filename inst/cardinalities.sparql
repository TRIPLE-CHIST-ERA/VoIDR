# data properties:
PREFIX sh:<http://www.w3.org/ns/shacl#>
PREFIX sd:<http://www.w3.org/ns/sparql-service-description#>
PREFIX void:<http://rdfs.org/ns/void#>
PREFIX void_ext:<http://ldf.fi/void-ext#>
SELECT DISTINCT  ?property ?datatypeTo ?classFrom ?cardinalities
where {
  ?cp1 void:class ?classFrom .
  ?cp1 void:propertyPartition ?pp1 .
  ?pp1 void:property ?property .
  ?pp1 void:triples ?triples .
  {
    ?pp1 void_ext:datatypePartition ?cp2 .
    ?cp2 void_ext:datatype ?datatypeTo .
  }

{
###
SELECT
    ?graph
    ?property
    ( CONCAT( MAX( ?subject_cardinality ), '..', MAX( ?object_cardinality )) AS ?cardinalities ) # NB: "1" is smaller than "n"
WHERE{
    {
        SELECT DISTINCT
            ?graph
            ?property
            ?distinct_subjects
            ?triples
            ?distinct_objects
            ( IF( ?distinct_subjects = ?triples, "1", "n" ) AS ?subject_cardinality )
            ( IF( ?distinct_objects  = ?triples, "1", "n" ) AS ?object_cardinality  )
        WHERE{
            BIND (<https://sparql.uniprot.org/.well-known/void#_graph_uniprot> AS ?graph)
            ?graph a sd:Graph ;
                void:propertyPartition ?property_partition .
            ?property_partition
                void:property         ?property          ;
                void:distinctSubjects ?distinct_subjects ;
                void:triples          ?triples           ;
                void:distinctObjects  ?distinct_objects  .
        }
    }
}
GROUP BY ?graph ?property
###
}
} ORDER BY ?classFrom ?cardinalities



#### class properties:

SELECT DISTINCT  ?property ?classTo ?classFrom ?cardinalities
where {
  ?cp1 void:class ?classFrom .
  ?cp1 void:propertyPartition ?pp1 .
  ?pp1 void:property ?property .
  ?pp1 void:triples ?triples .
{
    ?pp1 void:classPartition ?cp2 .
    ?cp2 void:class ?classTo .
    ?graph void:classPartition ?cp3 .
    ?cp3 void:class ?classTo .
  }
{
###
SELECT
    ?property
    ( CONCAT( MAX( ?subject_cardinality ), '..', MAX( ?object_cardinality )) AS ?cardinalities ) # NB: "1" is smaller than "n"
WHERE{
    {
        SELECT DISTINCT
            ?graph
            ?property
            ?distinct_subjects
            ?triples
            ?distinct_objects
            ( IF( ?distinct_subjects = ?triples, "1", "n" ) AS ?subject_cardinality )
            ( IF( ?distinct_objects  = ?triples, "1", "n" ) AS ?object_cardinality  )
        WHERE{
            ?graph a sd:Graph ;
                void:propertyPartition ?property_partition .
            ?property_partition
                void:property         ?property          ;
                void:distinctSubjects ?distinct_subjects ;
                void:triples          ?triples           ;
                void:distinctObjects  ?distinct_objects  .
        }
    }
}
GROUP BY ?property
###
}
} ORDER BY ?classFrom ?cardinalities



### new load unique data:
SELECT *
       WHERE {
  # first a subquery to set the limit. Add also the first column here? That would ensure that at least that column will be populated.
                 {SELECT ?Taxon ?commonName
    WHERE {
                     ?Taxon a <http://purl.uniprot.org/core/Taxon> .
                     ?Taxon <http://purl.uniprot.org/core/commonName> ?commonName
                   } LIMIT 1000
                 }
  # Following columns. OPTIONAL? If yes I'll always get my 1000 rows but might be mostly empty. If no I risk getting fewer rows but guaranteed full. Often fewer = 0 (the more columns I add the more I risk this)
 OPTIONAL {?Taxon <http://purl.uniprot.org/core/otherName>  ?otherName }
   OPTIONAL {?Taxon <http://purl.uniprot.org/core/strain>  ?strain }

            }
